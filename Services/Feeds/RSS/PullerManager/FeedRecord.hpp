/*
 * product   : NewsGate - news search WEB server
 * copyright : Copyright (c) 2005-2016 Karen Arutyunov
 * licenses  : CC BY-NC-SA 3.0; see accompanying LICENSE file
 *             Commercial; contact karen.arutyunov@gmail.com
 */

// Copyright (C) 2005-2008 Karen Arutyunov
//
// This program was generated by MySQL Class Generating Compiler
// MySQLClassGen (TM)
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

#ifndef _NEWSGATE_RSS_FEEDRECORD__2087742441_
#define _NEWSGATE_RSS_FEEDRECORD__2087742441_

#include <limits.h>

#include <string>
#include <sstream>

#include <El/Exception.hpp>
#include <El/MySQL/DB.hpp>

namespace NewsGate
{
  namespace RSS
  {
//
// FeedRecord class declaration
//
    class FeedRecord: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      FeedRecord(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong id() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedShort type() const
       throw(Exception, El::Exception);

      El::MySQL::String url() const
       throw(Exception, El::Exception);

      El::MySQL::String encoding() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedShort space() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedShort lang() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedShort country() const
       throw(Exception, El::Exception);

      El::MySQL::String status() const
       throw(Exception, El::Exception);

      El::MySQL::String keywords() const
       throw(Exception, El::Exception);

      El::MySQL::String adjustment_script() const
       throw(Exception, El::Exception);

      El::MySQL::String channel_title() const
       throw(Exception, El::Exception);

      El::MySQL::String channel_description() const
       throw(Exception, El::Exception);

      El::MySQL::String channel_html_link() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedShort channel_lang() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedShort channel_country() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedShort channel_ttl() const
       throw(Exception, El::Exception);

      El::MySQL::DateTime channel_last_build_date() const
       throw(Exception, El::Exception);

      El::MySQL::DateTime last_request_date() const
       throw(Exception, El::Exception);

      El::MySQL::String last_modified_hdr() const
       throw(Exception, El::Exception);

      El::MySQL::String etag_hdr() const
       throw(Exception, El::Exception);

      El::MySQL::LongLong content_length_hdr() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedLong entropy() const
       throw(Exception, El::Exception);

      El::MySQL::DateTime entropy_updated_date() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedLong size() const
       throw(Exception, El::Exception);

      El::MySQL::Char single_chunked() const
       throw(Exception, El::Exception);

      El::MySQL::LongLong first_chunk_size() const
       throw(Exception, El::Exception);

      El::MySQL::Long heuristics_counter() const
       throw(Exception, El::Exception);

      El::MySQL::String cache() const
       throw(Exception, El::Exception);

    };

//
// FeedRecord class definition
//
    inline
    FeedRecord::FeedRecord(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)28);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 8 for field id";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field id";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "id"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of id for field id";

        throw Exception(ostr.str());
      }

      if(use_columns >= 1)
      {
        return;
      }

      type = (*result)[1].type;

      if(type != 2)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 2 for field type";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[1].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field type";

        throw Exception(ostr.str());
      }

      name = (*result)[1].name;

      if(strcmp(name, "type"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of type for field type";

        throw Exception(ostr.str());
      }

      if(use_columns >= 2)
      {
        return;
      }

      type = (*result)[2].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 253 for field url";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[2].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x80)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x80 for field url";

        throw Exception(ostr.str());
      }

      name = (*result)[2].name;

      if(strcmp(name, "url"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of url for field url";

        throw Exception(ostr.str());
      }

      if(use_columns >= 3)
      {
        return;
      }

      type = (*result)[3].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 253 for field encoding";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[3].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field encoding";

        throw Exception(ostr.str());
      }

      name = (*result)[3].name;

      if(strcmp(name, "encoding"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of encoding for field encoding";

        throw Exception(ostr.str());
      }

      if(use_columns >= 4)
      {
        return;
      }

      type = (*result)[4].type;

      if(type != 2)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 2 for field space";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[4].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field space";

        throw Exception(ostr.str());
      }

      name = (*result)[4].name;

      if(strcmp(name, "space"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of space for field space";

        throw Exception(ostr.str());
      }

      if(use_columns >= 5)
      {
        return;
      }

      type = (*result)[5].type;

      if(type != 2)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 2 for field lang";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[5].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field lang";

        throw Exception(ostr.str());
      }

      name = (*result)[5].name;

      if(strcmp(name, "lang"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of lang for field lang";

        throw Exception(ostr.str());
      }

      if(use_columns >= 6)
      {
        return;
      }

      type = (*result)[6].type;

      if(type != 2)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 2 for field country";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[6].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field country";

        throw Exception(ostr.str());
      }

      name = (*result)[6].name;

      if(strcmp(name, "country"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of country for field country";

        throw Exception(ostr.str());
      }

      if(use_columns >= 7)
      {
        return;
      }

      type = (*result)[7].type;

      if(type != 254)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 254 for field status";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[7].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field status";

        throw Exception(ostr.str());
      }

      name = (*result)[7].name;

      if(strcmp(name, "status"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of status for field status";

        throw Exception(ostr.str());
      }

      if(use_columns >= 8)
      {
        return;
      }

      type = (*result)[8].type;

      if(type != 252)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 252 for field keywords";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[8].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field keywords";

        throw Exception(ostr.str());
      }

      name = (*result)[8].name;

      if(strcmp(name, "keywords"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of keywords for field keywords";

        throw Exception(ostr.str());
      }

      if(use_columns >= 9)
      {
        return;
      }

      type = (*result)[9].type;

      if(type != 252)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 252 for field adjustment_script";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[9].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field adjustment_script";

        throw Exception(ostr.str());
      }

      name = (*result)[9].name;

      if(strcmp(name, "adjustment_script"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of adjustment_script for field adjustment_script";

        throw Exception(ostr.str());
      }

      if(use_columns >= 10)
      {
        return;
      }

      type = (*result)[10].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 253 for field channel_title";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[10].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field channel_title";

        throw Exception(ostr.str());
      }

      name = (*result)[10].name;

      if(strcmp(name, "channel_title"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of channel_title for field channel_title";

        throw Exception(ostr.str());
      }

      if(use_columns >= 11)
      {
        return;
      }

      type = (*result)[11].type;

      if(type != 252)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 252 for field channel_description";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[11].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field channel_description";

        throw Exception(ostr.str());
      }

      name = (*result)[11].name;

      if(strcmp(name, "channel_description"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of channel_description for field channel_description";

        throw Exception(ostr.str());
      }

      if(use_columns >= 12)
      {
        return;
      }

      type = (*result)[12].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 253 for field channel_html_link";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[12].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field channel_html_link";

        throw Exception(ostr.str());
      }

      name = (*result)[12].name;

      if(strcmp(name, "channel_html_link"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of channel_html_link for field channel_html_link";

        throw Exception(ostr.str());
      }

      if(use_columns >= 13)
      {
        return;
      }

      type = (*result)[13].type;

      if(type != 2)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 2 for field channel_lang";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[13].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field channel_lang";

        throw Exception(ostr.str());
      }

      name = (*result)[13].name;

      if(strcmp(name, "channel_lang"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of channel_lang for field channel_lang";

        throw Exception(ostr.str());
      }

      if(use_columns >= 14)
      {
        return;
      }

      type = (*result)[14].type;

      if(type != 2)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 2 for field channel_country";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[14].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field channel_country";

        throw Exception(ostr.str());
      }

      name = (*result)[14].name;

      if(strcmp(name, "channel_country"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of channel_country for field channel_country";

        throw Exception(ostr.str());
      }

      if(use_columns >= 15)
      {
        return;
      }

      type = (*result)[15].type;

      if(type != 2)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 2 for field channel_ttl";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[15].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field channel_ttl";

        throw Exception(ostr.str());
      }

      name = (*result)[15].name;

      if(strcmp(name, "channel_ttl"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of channel_ttl for field channel_ttl";

        throw Exception(ostr.str());
      }

      if(use_columns >= 16)
      {
        return;
      }

      type = (*result)[16].type;

      if(type != 12)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 12 for field channel_last_build_date";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[16].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x80)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x80 for field channel_last_build_date";

        throw Exception(ostr.str());
      }

      name = (*result)[16].name;

      if(strcmp(name, "channel_last_build_date"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of channel_last_build_date for field channel_last_build_date";

        throw Exception(ostr.str());
      }

      if(use_columns >= 17)
      {
        return;
      }

      type = (*result)[17].type;

      if(type != 12)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 12 for field last_request_date";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[17].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x80)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x80 for field last_request_date";

        throw Exception(ostr.str());
      }

      name = (*result)[17].name;

      if(strcmp(name, "last_request_date"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of last_request_date for field last_request_date";

        throw Exception(ostr.str());
      }

      if(use_columns >= 18)
      {
        return;
      }

      type = (*result)[18].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 253 for field last_modified_hdr";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[18].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field last_modified_hdr";

        throw Exception(ostr.str());
      }

      name = (*result)[18].name;

      if(strcmp(name, "last_modified_hdr"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of last_modified_hdr for field last_modified_hdr";

        throw Exception(ostr.str());
      }

      if(use_columns >= 19)
      {
        return;
      }

      type = (*result)[19].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 253 for field etag_hdr";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[19].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field etag_hdr";

        throw Exception(ostr.str());
      }

      name = (*result)[19].name;

      if(strcmp(name, "etag_hdr"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of etag_hdr for field etag_hdr";

        throw Exception(ostr.str());
      }

      if(use_columns >= 20)
      {
        return;
      }

      type = (*result)[20].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 8 for field content_length_hdr";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[20].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field content_length_hdr";

        throw Exception(ostr.str());
      }

      name = (*result)[20].name;

      if(strcmp(name, "content_length_hdr"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of content_length_hdr for field content_length_hdr";

        throw Exception(ostr.str());
      }

      if(use_columns >= 21)
      {
        return;
      }

      type = (*result)[21].type;

      if(type != 3)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 3 for field entropy";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[21].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field entropy";

        throw Exception(ostr.str());
      }

      name = (*result)[21].name;

      if(strcmp(name, "entropy"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of entropy for field entropy";

        throw Exception(ostr.str());
      }

      if(use_columns >= 22)
      {
        return;
      }

      type = (*result)[22].type;

      if(type != 12)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 12 for field entropy_updated_date";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[22].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x80)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x80 for field entropy_updated_date";

        throw Exception(ostr.str());
      }

      name = (*result)[22].name;

      if(strcmp(name, "entropy_updated_date"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of entropy_updated_date for field entropy_updated_date";

        throw Exception(ostr.str());
      }

      if(use_columns >= 23)
      {
        return;
      }

      type = (*result)[23].type;

      if(type != 3)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 3 for field size";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[23].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field size";

        throw Exception(ostr.str());
      }

      name = (*result)[23].name;

      if(strcmp(name, "size"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of size for field size";

        throw Exception(ostr.str());
      }

      if(use_columns >= 24)
      {
        return;
      }

      type = (*result)[24].type;

      if(type != 1)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 1 for field single_chunked";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[24].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field single_chunked";

        throw Exception(ostr.str());
      }

      name = (*result)[24].name;

      if(strcmp(name, "single_chunked"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of single_chunked for field single_chunked";

        throw Exception(ostr.str());
      }

      if(use_columns >= 25)
      {
        return;
      }

      type = (*result)[25].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 8 for field first_chunk_size";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[25].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field first_chunk_size";

        throw Exception(ostr.str());
      }

      name = (*result)[25].name;

      if(strcmp(name, "first_chunk_size"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of first_chunk_size for field first_chunk_size";

        throw Exception(ostr.str());
      }

      if(use_columns >= 26)
      {
        return;
      }

      type = (*result)[26].type;

      if(type != 3)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 3 for field heuristics_counter";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[26].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field heuristics_counter";

        throw Exception(ostr.str());
      }

      name = (*result)[26].name;

      if(strcmp(name, "heuristics_counter"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of heuristics_counter for field heuristics_counter";

        throw Exception(ostr.str());
      }

      if(use_columns >= 27)
      {
        return;
      }

      type = (*result)[27].type;

      if(type != 252)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected type " << type
             << " instead of 252 for field cache";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[27].flags & (UNSIGNED_FLAG|BINARY_FLAG);

      if(flags != 0x80)
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x80 for field cache";

        throw Exception(ostr.str());
      }

      name = (*result)[27].name;

      if(strcmp(name, "cache"))
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::FeedRecord: unexpected name " << name
             << " instead of cache for field cache";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLongLong
    FeedRecord::id() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::id: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::id: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::id: failed to convert 'id' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

    inline
    El::MySQL::UnsignedShort
    FeedRecord::type() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::type: row_ is 0");
      }

      if(1 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::type: unexpected index 1 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned short value = 0;
      bool is_null = row_[1] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[1], lengths[1]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::type: failed to convert 'type' field data"
            " to unsigned short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedShort(is_null, value);
    }

    inline
    El::MySQL::String
    FeedRecord::url() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::url: row_ is 0");
      }

      if(2 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::url: unexpected index 2 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[2] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[2], lengths[2]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::encoding() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::encoding: row_ is 0");
      }

      if(3 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::encoding: unexpected index 3 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[3] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[3], lengths[3]);

      return tmp;
    }

    inline
    El::MySQL::UnsignedShort
    FeedRecord::space() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::space: row_ is 0");
      }

      if(4 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::space: unexpected index 4 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned short value = 0;
      bool is_null = row_[4] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[4], lengths[4]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::space: failed to convert 'space' field data"
            " to unsigned short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedShort(is_null, value);
    }

    inline
    El::MySQL::UnsignedShort
    FeedRecord::lang() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::lang: row_ is 0");
      }

      if(5 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::lang: unexpected index 5 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned short value = 0;
      bool is_null = row_[5] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[5], lengths[5]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::lang: failed to convert 'lang' field data"
            " to unsigned short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedShort(is_null, value);
    }

    inline
    El::MySQL::UnsignedShort
    FeedRecord::country() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::country: row_ is 0");
      }

      if(6 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::country: unexpected index 6 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned short value = 0;
      bool is_null = row_[6] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[6], lengths[6]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::country: failed to convert 'country' field data"
            " to unsigned short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedShort(is_null, value);
    }

    inline
    El::MySQL::String
    FeedRecord::status() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::status: row_ is 0");
      }

      if(7 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::status: unexpected index 7 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[7] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[7], lengths[7]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::keywords() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::keywords: row_ is 0");
      }

      if(8 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::keywords: unexpected index 8 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[8] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[8], lengths[8]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::adjustment_script() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::adjustment_script: row_ is 0");
      }

      if(9 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::adjustment_script: unexpected index 9 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[9] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[9], lengths[9]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::channel_title() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::channel_title: row_ is 0");
      }

      if(10 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::channel_title: unexpected index 10 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[10] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[10], lengths[10]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::channel_description() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::channel_description: row_ is 0");
      }

      if(11 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::channel_description: unexpected index 11 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[11] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[11], lengths[11]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::channel_html_link() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::channel_html_link: row_ is 0");
      }

      if(12 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::channel_html_link: unexpected index 12 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[12] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[12], lengths[12]);

      return tmp;
    }

    inline
    El::MySQL::UnsignedShort
    FeedRecord::channel_lang() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::channel_lang: row_ is 0");
      }

      if(13 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::channel_lang: unexpected index 13 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned short value = 0;
      bool is_null = row_[13] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[13], lengths[13]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::channel_lang: failed to convert 'channel_lang' field data"
            " to unsigned short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedShort(is_null, value);
    }

    inline
    El::MySQL::UnsignedShort
    FeedRecord::channel_country() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::channel_country: row_ is 0");
      }

      if(14 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::channel_country: unexpected index 14 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned short value = 0;
      bool is_null = row_[14] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[14], lengths[14]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::channel_country: failed to convert 'channel_country' field data"
            " to unsigned short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedShort(is_null, value);
    }

    inline
    El::MySQL::UnsignedShort
    FeedRecord::channel_ttl() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::channel_ttl: row_ is 0");
      }

      if(15 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::channel_ttl: unexpected index 15 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned short value = 0;
      bool is_null = row_[15] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[15], lengths[15]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::channel_ttl: failed to convert 'channel_ttl' field data"
            " to unsigned short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedShort(is_null, value);
    }

    inline
    El::MySQL::DateTime
    FeedRecord::channel_last_build_date() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::channel_last_build_date: row_ is 0");
      }

      if(16 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::channel_last_build_date: unexpected index 16 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[16] == 0)
      {
        El::MySQL::DateTime tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::DateTime tmp(false, row_[16], lengths[16]);

      return tmp;
    }

    inline
    El::MySQL::DateTime
    FeedRecord::last_request_date() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::last_request_date: row_ is 0");
      }

      if(17 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::last_request_date: unexpected index 17 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[17] == 0)
      {
        El::MySQL::DateTime tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::DateTime tmp(false, row_[17], lengths[17]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::last_modified_hdr() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::last_modified_hdr: row_ is 0");
      }

      if(18 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::last_modified_hdr: unexpected index 18 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[18] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[18], lengths[18]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedRecord::etag_hdr() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::etag_hdr: row_ is 0");
      }

      if(19 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::etag_hdr: unexpected index 19 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[19] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[19], lengths[19]);

      return tmp;
    }

    inline
    El::MySQL::LongLong
    FeedRecord::content_length_hdr() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::content_length_hdr: row_ is 0");
      }

      if(20 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::content_length_hdr: unexpected index 20 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      long long value = 0;
      bool is_null = row_[20] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[20], lengths[20]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::content_length_hdr: failed to convert 'content_length_hdr' field data"
            " to long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::LongLong(is_null, value);
    }

    inline
    El::MySQL::UnsignedLong
    FeedRecord::entropy() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::entropy: row_ is 0");
      }

      if(21 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::entropy: unexpected index 21 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long value = 0;
      bool is_null = row_[21] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[21], lengths[21]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::entropy: failed to convert 'entropy' field data"
            " to unsigned long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLong(is_null, value);
    }

    inline
    El::MySQL::DateTime
    FeedRecord::entropy_updated_date() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::entropy_updated_date: row_ is 0");
      }

      if(22 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::entropy_updated_date: unexpected index 22 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[22] == 0)
      {
        El::MySQL::DateTime tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::DateTime tmp(false, row_[22], lengths[22]);

      return tmp;
    }

    inline
    El::MySQL::UnsignedLong
    FeedRecord::size() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::size: row_ is 0");
      }

      if(23 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::size: unexpected index 23 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long value = 0;
      bool is_null = row_[23] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[23], lengths[23]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::size: failed to convert 'size' field data"
            " to unsigned long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLong(is_null, value);
    }

    inline
    El::MySQL::Char
    FeedRecord::single_chunked() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::single_chunked: row_ is 0");
      }

      if(24 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::single_chunked: unexpected index 24 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      short value = 0;
      bool is_null = row_[24] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[24], lengths[24]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::single_chunked: failed to convert 'single_chunked' field data"
            " to short";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::Char(is_null, value);
    }

    inline
    El::MySQL::LongLong
    FeedRecord::first_chunk_size() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::first_chunk_size: row_ is 0");
      }

      if(25 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::first_chunk_size: unexpected index 25 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      long long value = 0;
      bool is_null = row_[25] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[25], lengths[25]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::first_chunk_size: failed to convert 'first_chunk_size' field data"
            " to long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::LongLong(is_null, value);
    }

    inline
    El::MySQL::Long
    FeedRecord::heuristics_counter() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::heuristics_counter: row_ is 0");
      }

      if(26 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::heuristics_counter: unexpected index 26 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      long value = 0;
      bool is_null = row_[26] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[26], lengths[26]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedRecord::heuristics_counter: failed to convert 'heuristics_counter' field data"
            " to long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::Long(is_null, value);
    }

    inline
    El::MySQL::String
    FeedRecord::cache() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedRecord::cache: row_ is 0");
      }

      if(27 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedRecord::cache: unexpected index 27 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[27] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[27], lengths[27]);

      return tmp;
    }

  }
}

namespace NewsGate
{
  namespace RSS
  {
//
// FeedMessageCode class declaration
//
    class FeedMessageCode: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      FeedMessageCode(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLong msg_id() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong published() const
       throw(Exception, El::Exception);

    };

//
// FeedMessageCode class definition
//
    inline
    FeedMessageCode::FeedMessageCode(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)2);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::FeedMessageCode: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 3)
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::FeedMessageCode: unexpected type " << type
             << " instead of 3 for field msg_id";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x21)
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::FeedMessageCode: unexpected flags 0x" << std::hex
             << flags << " instead of 0x21 for field msg_id";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "msg_id"))
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::FeedMessageCode: unexpected name " << name
             << " instead of msg_id for field msg_id";

        throw Exception(ostr.str());
      }

      if(use_columns >= 1)
      {
        return;
      }

      type = (*result)[1].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::FeedMessageCode: unexpected type " << type
             << " instead of 8 for field published";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[1].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x21)
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::FeedMessageCode: unexpected flags 0x" << std::hex
             << flags << " instead of 0x21 for field published";

        throw Exception(ostr.str());
      }

      name = (*result)[1].name;

      if(strcmp(name, "published"))
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::FeedMessageCode: unexpected name " << name
             << " instead of published for field published";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLong
    FeedMessageCode::msg_id() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedMessageCode::msg_id: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::msg_id: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedMessageCode::msg_id: failed to convert 'msg_id' field data"
            " to unsigned long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLong(is_null, value);
    }

    inline
    El::MySQL::UnsignedLongLong
    FeedMessageCode::published() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedMessageCode::published: row_ is 0");
      }

      if(1 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedMessageCode::published: unexpected index 1 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[1] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[1], lengths[1]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedMessageCode::published: failed to convert 'published' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

  }
}

namespace NewsGate
{
  namespace RSS
  {
//
// MaxId class declaration
//
    class MaxId: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      MaxId(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong value() const
       throw(Exception, El::Exception);

    };

//
// MaxId class definition
//
    inline
    MaxId::MaxId(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)1);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "MaxId::MaxId: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "MaxId::MaxId: unexpected type " << type
             << " instead of 8 for field value";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0xa0)
      {
        std::ostringstream ostr;
        ostr << "MaxId::MaxId: unexpected flags 0x" << std::hex
             << flags << " instead of 0xa0 for field value";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "value"))
      {
        std::ostringstream ostr;
        ostr << "MaxId::MaxId: unexpected name " << name
             << " instead of value for field value";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLongLong
    MaxId::value() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MaxId::value: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MaxId::value: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "MaxId::value: failed to convert 'value' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

  }
}

namespace NewsGate
{
  namespace RSS
  {
//
// FeedUpdateNum class declaration
//
    class FeedUpdateNum: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      FeedUpdateNum(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong update_num() const
       throw(Exception, El::Exception);

    };

//
// FeedUpdateNum class definition
//
    inline
    FeedUpdateNum::FeedUpdateNum(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)1);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "FeedUpdateNum::FeedUpdateNum: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "FeedUpdateNum::FeedUpdateNum: unexpected type " << type
             << " instead of 8 for field update_num";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x21)
      {
        std::ostringstream ostr;
        ostr << "FeedUpdateNum::FeedUpdateNum: unexpected flags 0x" << std::hex
             << flags << " instead of 0x21 for field update_num";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "update_num"))
      {
        std::ostringstream ostr;
        ostr << "FeedUpdateNum::FeedUpdateNum: unexpected name " << name
             << " instead of update_num for field update_num";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLongLong
    FeedUpdateNum::update_num() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedUpdateNum::update_num: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedUpdateNum::update_num: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedUpdateNum::update_num: failed to convert 'update_num' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

  }
}

namespace NewsGate
{
  namespace RSS
  {
//
// FeedStatusRecord class declaration
//
    class FeedStatusRecord: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      FeedStatusRecord(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong id() const
       throw(Exception, El::Exception);

      El::MySQL::String url() const
       throw(Exception, El::Exception);

      El::MySQL::String status() const
       throw(Exception, El::Exception);

    };

//
// FeedStatusRecord class definition
//
    inline
    FeedStatusRecord::FeedStatusRecord(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)3);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected type " << type
             << " instead of 8 for field id";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x21)
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x21 for field id";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "id"))
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected name " << name
             << " instead of id for field id";

        throw Exception(ostr.str());
      }

      if(use_columns >= 1)
      {
        return;
      }

      type = (*result)[1].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected type " << type
             << " instead of 253 for field url";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[1].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x81)
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x81 for field url";

        throw Exception(ostr.str());
      }

      name = (*result)[1].name;

      if(strcmp(name, "url"))
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected name " << name
             << " instead of url for field url";

        throw Exception(ostr.str());
      }

      if(use_columns >= 2)
      {
        return;
      }

      type = (*result)[2].type;

      if(type != 254)
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected type " << type
             << " instead of 254 for field status";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[2].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x1)
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x1 for field status";

        throw Exception(ostr.str());
      }

      name = (*result)[2].name;

      if(strcmp(name, "status"))
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::FeedStatusRecord: unexpected name " << name
             << " instead of status for field status";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLongLong
    FeedStatusRecord::id() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedStatusRecord::id: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::id: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedStatusRecord::id: failed to convert 'id' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

    inline
    El::MySQL::String
    FeedStatusRecord::url() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedStatusRecord::url: row_ is 0");
      }

      if(1 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::url: unexpected index 1 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[1] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[1], lengths[1]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedStatusRecord::status() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedStatusRecord::status: row_ is 0");
      }

      if(2 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedStatusRecord::status: unexpected index 2 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[2] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[2], lengths[2]);

      return tmp;
    }

  }
}

namespace NewsGate
{
  namespace RSS
  {
//
// FeedFormerUrlRecord class declaration
//
    class FeedFormerUrlRecord: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      FeedFormerUrlRecord(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong feed_id() const
       throw(Exception, El::Exception);

      El::MySQL::String url() const
       throw(Exception, El::Exception);

      El::MySQL::String status() const
       throw(Exception, El::Exception);

    };

//
// FeedFormerUrlRecord class definition
//
    inline
    FeedFormerUrlRecord::FeedFormerUrlRecord(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)3);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected type " << type
             << " instead of 8 for field feed_id";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x21)
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x21 for field feed_id";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "feed_id"))
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected name " << name
             << " instead of feed_id for field feed_id";

        throw Exception(ostr.str());
      }

      if(use_columns >= 1)
      {
        return;
      }

      type = (*result)[1].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected type " << type
             << " instead of 253 for field url";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[1].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x81)
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x81 for field url";

        throw Exception(ostr.str());
      }

      name = (*result)[1].name;

      if(strcmp(name, "url"))
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected name " << name
             << " instead of url for field url";

        throw Exception(ostr.str());
      }

      if(use_columns >= 2)
      {
        return;
      }

      type = (*result)[2].type;

      if(type != 254)
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected type " << type
             << " instead of 254 for field status";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[2].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field status";

        throw Exception(ostr.str());
      }

      name = (*result)[2].name;

      if(strcmp(name, "status"))
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::FeedFormerUrlRecord: unexpected name " << name
             << " instead of status for field status";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLongLong
    FeedFormerUrlRecord::feed_id() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedFormerUrlRecord::feed_id: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::feed_id: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "FeedFormerUrlRecord::feed_id: failed to convert 'feed_id' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

    inline
    El::MySQL::String
    FeedFormerUrlRecord::url() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedFormerUrlRecord::url: row_ is 0");
      }

      if(1 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::url: unexpected index 1 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[1] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[1], lengths[1]);

      return tmp;
    }

    inline
    El::MySQL::String
    FeedFormerUrlRecord::status() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("FeedFormerUrlRecord::status: row_ is 0");
      }

      if(2 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "FeedFormerUrlRecord::status: unexpected index 2 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[2] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[2], lengths[2]);

      return tmp;
    }

  }
}

namespace NewsGate
{
  namespace RSS
  {
//
// MessageFilterUpdateNum class declaration
//
    class MessageFilterUpdateNum: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      MessageFilterUpdateNum(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong update_num() const
       throw(Exception, El::Exception);

    };

//
// MessageFilterUpdateNum class definition
//
    inline
    MessageFilterUpdateNum::MessageFilterUpdateNum(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)1);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "MessageFilterUpdateNum::MessageFilterUpdateNum: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "MessageFilterUpdateNum::MessageFilterUpdateNum: unexpected type " << type
             << " instead of 8 for field update_num";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x21)
      {
        std::ostringstream ostr;
        ostr << "MessageFilterUpdateNum::MessageFilterUpdateNum: unexpected flags 0x" << std::hex
             << flags << " instead of 0x21 for field update_num";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "update_num"))
      {
        std::ostringstream ostr;
        ostr << "MessageFilterUpdateNum::MessageFilterUpdateNum: unexpected name " << name
             << " instead of update_num for field update_num";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLongLong
    MessageFilterUpdateNum::update_num() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MessageFilterUpdateNum::update_num: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MessageFilterUpdateNum::update_num: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "MessageFilterUpdateNum::update_num: failed to convert 'update_num' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

  }
}

#endif // _NEWSGATE_RSS_FEEDRECORD__2087742441_
