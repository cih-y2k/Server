/*
 * product   : NewsGate - news search WEB server
 * copyright : Copyright (c) 2005-2016 Karen Arutyunov
 * licenses  : CC BY-NC-SA 3.0; see accompanying LICENSE file
 *             Commercial; contact karen.arutyunov@gmail.com
 */

// Copyright (C) 2005-2008 Karen Arutyunov
//
// This program was generated by MySQL Class Generating Compiler
// MySQLClassGen (TM)
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

#ifndef _NEWSGATE_MESSAGE_MESSAGECONTENTRECORD__2087742441_
#define _NEWSGATE_MESSAGE_MESSAGECONTENTRECORD__2087742441_

#include <limits.h>

#include <string>
#include <sstream>

#include <El/Exception.hpp>
#include <El/MySQL/DB.hpp>

namespace NewsGate
{
  namespace Message
  {
//
// MessageContentRecord class declaration
//
    class MessageContentRecord: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      MessageContentRecord(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::UnsignedLongLong id() const
       throw(Exception, El::Exception);

      El::MySQL::UnsignedLong dict_hash() const
       throw(Exception, El::Exception);

      El::MySQL::String complements() const
       throw(Exception, El::Exception);

      El::MySQL::String url() const
       throw(Exception, El::Exception);

      El::MySQL::String source_html_link() const
       throw(Exception, El::Exception);

    };

//
// MessageContentRecord class definition
//
    inline
    MessageContentRecord::MessageContentRecord(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)5);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected type " << type
             << " instead of 8 for field id";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x21)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x21 for field id";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "id"))
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected name " << name
             << " instead of id for field id";

        throw Exception(ostr.str());
      }

      if(use_columns >= 1)
      {
        return;
      }

      type = (*result)[1].type;

      if(type != 3)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected type " << type
             << " instead of 3 for field dict_hash";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[1].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x20)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x20 for field dict_hash";

        throw Exception(ostr.str());
      }

      name = (*result)[1].name;

      if(strcmp(name, "dict_hash"))
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected name " << name
             << " instead of dict_hash for field dict_hash";

        throw Exception(ostr.str());
      }

      if(use_columns >= 2)
      {
        return;
      }

      type = (*result)[2].type;

      if(type != 252)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected type " << type
             << " instead of 252 for field complements";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[2].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x81)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x81 for field complements";

        throw Exception(ostr.str());
      }

      name = (*result)[2].name;

      if(strcmp(name, "complements"))
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected name " << name
             << " instead of complements for field complements";

        throw Exception(ostr.str());
      }

      if(use_columns >= 3)
      {
        return;
      }

      type = (*result)[3].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected type " << type
             << " instead of 253 for field url";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[3].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field url";

        throw Exception(ostr.str());
      }

      name = (*result)[3].name;

      if(strcmp(name, "url"))
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected name " << name
             << " instead of url for field url";

        throw Exception(ostr.str());
      }

      if(use_columns >= 4)
      {
        return;
      }

      type = (*result)[4].type;

      if(type != 253)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected type " << type
             << " instead of 253 for field source_html_link";

        throw Exception(ostr.str());
      }

      flags = 
        (*result)[4].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x0)
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected flags 0x" << std::hex
             << flags << " instead of 0x0 for field source_html_link";

        throw Exception(ostr.str());
      }

      name = (*result)[4].name;

      if(strcmp(name, "source_html_link"))
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::MessageContentRecord: unexpected name " << name
             << " instead of source_html_link for field source_html_link";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::UnsignedLongLong
    MessageContentRecord::id() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MessageContentRecord::id: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::id: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "MessageContentRecord::id: failed to convert 'id' field data"
            " to unsigned long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLongLong(is_null, value);
    }

    inline
    El::MySQL::UnsignedLong
    MessageContentRecord::dict_hash() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MessageContentRecord::dict_hash: row_ is 0");
      }

      if(1 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::dict_hash: unexpected index 1 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      unsigned long value = 0;
      bool is_null = row_[1] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[1], lengths[1]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "MessageContentRecord::dict_hash: failed to convert 'dict_hash' field data"
            " to unsigned long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::UnsignedLong(is_null, value);
    }

    inline
    El::MySQL::String
    MessageContentRecord::complements() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MessageContentRecord::complements: row_ is 0");
      }

      if(2 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::complements: unexpected index 2 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[2] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[2], lengths[2]);

      return tmp;
    }

    inline
    El::MySQL::String
    MessageContentRecord::url() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MessageContentRecord::url: row_ is 0");
      }

      if(3 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::url: unexpected index 3 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[3] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[3], lengths[3]);

      return tmp;
    }

    inline
    El::MySQL::String
    MessageContentRecord::source_html_link() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MessageContentRecord::source_html_link: row_ is 0");
      }

      if(4 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MessageContentRecord::source_html_link: unexpected index 4 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      if(row_[4] == 0)
      {
        El::MySQL::String tmp(true, 0, 0);
        return tmp;
      }

      unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
      El::MySQL::String tmp(false, row_[4], lengths[4]);

      return tmp;
    }

  }
}

namespace NewsGate
{
  namespace Message
  {
//
// MessageCount class declaration
//
    class MessageCount: public El::MySQL::Row
    {
    public:
      EL_EXCEPTION(Exception, El::MySQL::Exception);
      EL_EXCEPTION(IsNull, Exception);

    public:
      MessageCount(El::MySQL::Result* result, unsigned long use_columns = ULONG_MAX)
        throw(Exception, El::Exception);

      El::MySQL::LongLong count() const
       throw(Exception, El::Exception);

    };

//
// MessageCount class definition
//
    inline
    MessageCount::MessageCount(El::MySQL::Result* result, unsigned long use_columns)
      throw(Exception, El::Exception)
        : Row(result)
    {
      unsigned long num_columns = std::min(use_columns, (unsigned long)1);

      if(result->num_fields() != num_columns)
      {
        std::ostringstream ostr;
        ostr << "MessageCount::MessageCount: unexpected number of fields "
             << result->num_fields() << " instead of " << num_columns;

        throw Exception(ostr.str());
      }

      if(use_columns >= 0)
      {
        return;
      }

      enum_field_types type = (*result)[0].type;

      if(type != 8)
      {
        std::ostringstream ostr;
        ostr << "MessageCount::MessageCount: unexpected type " << type
             << " instead of 8 for field count";

        throw Exception(ostr.str());
      }

      unsigned int flags = 
        (*result)[0].flags & (UNSIGNED_FLAG|NOT_NULL_FLAG|BINARY_FLAG);

      if(flags != 0x81)
      {
        std::ostringstream ostr;
        ostr << "MessageCount::MessageCount: unexpected flags 0x" << std::hex
             << flags << " instead of 0x81 for field count";

        throw Exception(ostr.str());
      }

      const char* name = (*result)[0].name;

      if(strcmp(name, "count"))
      {
        std::ostringstream ostr;
        ostr << "MessageCount::MessageCount: unexpected name " << name
             << " instead of count for field count";

        throw Exception(ostr.str());
      }

    }

    inline
    El::MySQL::LongLong
    MessageCount::count() const
      throw(Exception, El::Exception)
    {
      El::MySQL::DB::init_thread();

      if(row_ == 0)
      {
        throw Exception("MessageCount::count: row_ is 0");
      }

      if(0 >= result_->num_fields())
      {
        std::ostringstream ostr;
        ostr << "MessageCount::count: unexpected index 0 when number of fileds is "
             << result_->num_fields();

        throw Exception(ostr.str());
      }

      long long value = 0;
      bool is_null = row_[0] == 0;

      if(!is_null)
      {
        unsigned long* lengths = mysql_fetch_lengths(result_->mysql_res());
        std::string tmp;
        tmp.assign(row_[0], lengths[0]);

        std::istringstream istr(tmp);
        istr >> value;

        if(istr.fail())
        {
          std::ostringstream ostr;
          ostr << "MessageCount::count: failed to convert 'count' field data"
            " to long long";

          throw Exception(ostr.str());
        }
      }

      return El::MySQL::LongLong(is_null, value);
    }

  }
}

#endif // _NEWSGATE_MESSAGE_MESSAGECONTENTRECORD__2087742441_
